name: Build & Release

on:
  push:
    tags:
      - 'v*'
    # branches:
    #   - main
    #   - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - name: linux-amd64
            goos: linux
            goarch: amd64
            platform: ubuntu-latest
            go-version: 1.24.2
            node-version: 22.x
            ext: ""
          - name: darwin-arm64
            goos: darwin
            goarch: arm64
            platform: macos-latest
            go-version: 1.24.2
            node-version: 22.x
            ext: ""
          # - name: windows-amd64
          #   goos: windows
          #   goarch: amd64
          #   platform: windows-latest
          #   go-version: 1.24.2
          #   node-version: 22.x
          #   ext: ".exe"
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Build frontend
        run: |
          cd web
          pnpm install
          pnpm build
          cd ..
          mkdir -p cmd/static
          cp -r web/build/* cmd/static/

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build backend
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
          go build -ldflags "-X main.version=${{ github.ref_name }}" -o magic-log-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }} ./cmd

      - name: Archive binary and generate checksum
        run: |
          mkdir dist/
          tar -czf dist/magic-log-${{ matrix.name }}.tar.gz magic-log-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.ext }}
          (cd dist/ && shasum -a 256 magic-log-${{ matrix.name }}.tar.gz > magic-log-${{ matrix.name }}.sha256)

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: magic-log-${{ matrix.name }}
          path: dist/

  release:
    name: GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Verify checksums
        run: |
          for dir in magic-log-*; do
            echo "üîç Verifying checksums in $dir"
            (cd "$dir" && shasum -c *.sha256)
          done

      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            magic-log-*/magic-log-*.tar.gz
            magic-log-*/magic-log-*.sha256

  publish:
    name: Homebrew publish
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Update Homebrew tap
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          HOMEBREW_TOKEN: ${{ secrets.HOMEBREW_TAP_PAT }}
        run: |
          set -e

          VERSION=${GITHUB_REF#refs/tags/v}
          FORMULA_REPO="https://x-access-token:${HOMEBREW_TOKEN}@github.com/paul-schwendenman/homebrew-magic-log-ui.git"
          CLONE_DIR=$(mktemp -d)
          FORMULA_NAME="magic-log"
          BIN="magic-log-darwin-arm64"
          TARBALL="${BIN}.tar.gz"

          URL="https://github.com/paul-schwendenman/magic-log-ui/releases/download/v${VERSION}/${TARBALL}"
          CHECKSUM=$(grep "${TARBALL}" magic-log-darwin-arm64/${BIN}.sha256 | cut -d ' ' -f 1)


          # Clone the tap repo
          git clone --depth=1 "${FORMULA_REPO}" "$CLONE_DIR"
          cd "$CLONE_DIR"

          cat > Formula/${FORMULA_NAME}.rb <<EOF
          class MagicLog < Formula
            desc "Live stream and query structured logs from your CLI"
            homepage "https://github.com/paul-schwendenman/magic-log-ui"
            url "${URL}"
            sha256 "${CHECKSUM}"
            version "${VERSION}"

            def install
              bin.install "${BIN}" => "magic-log"
            end
          end
          EOF

          echo "üìù Generated Homebrew formula:"
          cat Formula/${FORMULA_NAME}.rb

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add Formula/${FORMULA_NAME}.rb
          git commit -m "Bump ${FORMULA_NAME} to v${VERSION}"
          git push origin master

